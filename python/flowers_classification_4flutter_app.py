# -*- coding: utf-8 -*-
"""Flowers Classification 4Flutter App

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1paXOolPjp1X7oOsfabzB07pBSlQENCwn

# Flowers Images classification with TensorFlow Lite Model Maker
"""

!pip install -q tflite-model-maker

"""Import the required packages."""

import os

import numpy as np

import tensorflow as tf
assert tf.__version__.startswith('2')

from tflite_model_maker import model_spec
from tflite_model_maker import image_classifier
from tflite_model_maker.config import ExportFormat
from tflite_model_maker.config import QuantizationConfig
from tflite_model_maker.image_classifier import DataLoader

import matplotlib.pyplot as plt

"""## Simple End-to-End Example

### Get the data path

Let's get some images to play with this simple end-to-end example. Hundreds of images is a good start for Model Maker while more data could achieve better accuracy.
"""

!wget -N 'https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz'
import tarfile
file = tarfile.open('flower_photos.tgz')
file.extractall('./')
file.close()

#image_path='/content/spiders/train'
data = DataLoader.from_folder(image_path)

data = DataLoader.from_folder(image_path)
train_data, test_data = data.split(0.9)

model = image_classifier.create(train_data)

loss, accuracy = model.evaluate(test_data)

model.export(export_dir='/content/model16', export_format=ExportFormat.LABEL)
config = QuantizationConfig.for_float16()
model.export(export_dir='/content/model16', tflite_filename='model_flowers.tflite', quantization_config=config)

train_data, rest_data = data.split(0.8)
validation_data, test_data = rest_data.split(0.5)

"""Show 25 image examples with labels."""

plt.figure(figsize=(10,10))
for i, (image, label) in enumerate(data.gen_dataset().unbatch().take(25)):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(image.numpy(), cmap=plt.cm.gray)
  plt.xlabel(data.index_to_label[label.numpy()])
plt.show()

loss, accuracy = model.evaluate(test_data)

"""*We* could plot the predicted results in 100 test images. Predicted labels with red color are the wrong predicted results while others are correct."""

# A helper function that returns 'red'/'black' depending on if its two input
# parameter matches or not.
def get_label_color(val1, val2):
  if val1 == val2:
    return 'black'
  else:
    return 'red'

# Then plot 100 test images and their predicted labels.
# If a prediction result is different from the label provided label in "test"
# dataset, we will highlight it in red color.
plt.figure(figsize=(20, 20))
predicts = model.predict_top_k(test_data)
for i, (image, label) in enumerate(test_data.gen_dataset().unbatch().take(36)):
  ax = plt.subplot(6, 6, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(image.numpy(), cmap=plt.cm.gray)

  predict_label = predicts[i][0][0]
  color = get_label_color(predict_label,
                          test_data.index_to_label[label.numpy()])
  ax.xaxis.label.set_color(color)
  plt.xlabel('Predicted: %s' % predict_label)
plt.show()